<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">

	<!-- 리뷰 전체 조회 -->
	<select id="review_list" resultType="review">
		SELECT * FROM review ORDER
		BY created_at DESC
	</select>

	<!-- 리뷰 등록 -->
	<insert id="review_insert" parameterType="review">
		INSERT INTO review
		(review_id, user_name, content, rating, hb_idx, user_id)
		VALUES
		(review_seq.NEXTVAL, #{user_name}, #{content}, #{rating}, #{hb_idx},
		#{user_id})
	</insert>


	<!-- 특정 hbidx로 리뷰 조회 -->
	<select id="selreview_list" parameterType="int"
		resultType="review">
		SELECT r.*,
		COALESCE(rd.request_status, '게시 중') AS
		request_status
		FROM review r
		LEFT JOIN review_delete_requests rd
		ON
		r.review_id = rd.review_id
		AND rd.request_status = '대기'
		WHERE r.hb_idx =
		#{hb_idx}
		ORDER BY r.created_at DESC
	</select>



	<!-- 최신 리뷰 3개 조회 -->
	<select id="recentList" parameterType="int" resultType="review">
        <![CDATA[
        SELECT * FROM (
            SELECT * FROM review WHERE hb_idx = #{hb_idx} ORDER BY created_at DESC
        ) WHERE rownum <= 3
        ]]>
	</select>

	<!-- 특정 review_id로 리뷰 삭제 -->
	<delete id="review_del" parameterType="int">
		DELETE FROM review WHERE
		review_id = #{review_id}
	</delete>

	<!-- 특정 review_id로 리뷰 조회 -->
	<select id="getReviewById" parameterType="int"
		resultType="review">
		SELECT * FROM review WHERE review_id = #{review_id}
	</select>

	<!-- 특정 user_id에 해당하는 리뷰 목록을 가져오는 쿼리. 기존 쿼리에서는 review 테이블만 조회했지만, hobee 
		테이블과 JOIN하여 hb_title(모임명)도 함께 가져오도록 개선. -->
	<select id="getReviewsWithHobee" parameterType="String"
		resultType="review">
		SELECT
		r.review_id,
		r.user_id,
		r.hb_idx,
		r.rating,
		r.content,
		r.created_at,
		h.hb_title
		FROM review r
		JOIN hobee h ON r.hb_idx = h.hb_idx
		WHERE r.user_id = #{userId}
		ORDER BY r.created_at DESC
	</select>


	<!-- 삭제 요청을 DB에 저장 -->
	<insert id="insertDeleteRequest" parameterType="review">
		INSERT INTO
		review_delete_requests (review_id, requested_by, hb_idx,
		request_status)
		VALUES (#{review_id}, #{requested_by}, #{hb_idx},
		#{request_status})
	</insert>

	<!-- '대기' 상태의 삭제 요청 목록 조회 -->
	<select id="getPendingDeleteRequests" resultType="review">
		SELECT r.*,
		d.requested_by, d.request_status
		FROM review_delete_requests d
		JOIN
		review r ON d.review_id = r.review_id
		WHERE d.request_status = '대기'
	</select>

	<!-- 삭제 요청 승인/거절 업데이트 -->
	<update id="updateDeleteRequestStatus" parameterType="review">
		UPDATE
		review_delete_requests
		SET request_status = #{request_status}
		WHERE
		review_id = #{review_id}
	</update>

	<!-- 특정 리뷰 ID에 대한 삭제 요청 존재 여부 확인 -->
	<select id="countDeleteRequest" parameterType="int"
		resultType="int">
		SELECT COUNT(*) FROM review_delete_requests
		WHERE review_id
		= #{review_id} AND request_status = '대기'
	</select>

	<!-- 특정 요청 삭제 (관리자가 승인/거절 시) -->
	<delete id="deleteDeleteRequest" parameterType="int">
		DELETE FROM
		review_delete_requests WHERE review_id = #{review_id}
	</delete>

	<!-- 특정 hbidx의 모임을 만든 호스트의 user_id 조회 -->
	<select id="getHostUserIdByHbidx" parameterType="int"
		resultType="String">
		SELECT user_id FROM hobee WHERE hb_idx = #{hbidx}
	</select>



</mapper>